import{_ as a,c as e,o as n,ae as o}from"./chunks/framework.DDmtCRY9.js";const h=JSON.parse('{"title":"monorepo 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"start/monorepo.md","filePath":"start/monorepo.md"}'),p={name:"start/monorepo.md"};function i(t,s,r,l,c,d){return n(),e("div",null,s[0]||(s[0]=[o(`<h1 id="monorepo-介绍" tabindex="-1">monorepo 介绍 <a class="header-anchor" href="#monorepo-介绍" aria-label="Permalink to &quot;monorepo 介绍&quot;">​</a></h1><p>请先阅读<a href="https://pnpm.io/zh/workspaces" target="_blank" rel="noreferrer">pnpm monorepo</a>详解。</p><p><code>monorepo</code> 是一个概念，它代表一个仓库中包含多个子项目，这些子项目可以共享相同的依赖，也可以共享相同的构建工具。本项目里使用基于<code>pnpm</code>的\`monorepo 能力。</p><p>pnpm 使用<code>monorepo</code>架构只需在根目录新建<code>pnpm-workspace.yaml</code>，<code>rengar-admin</code>的配置如下：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # packages/ 直接子目录中的所有包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 排除测试目录中的包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;!**/test/**&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>该配置会把<code>packages</code>下的所有直接子目录作为包</p><p>由于使用了<code>monorepo</code>，安装依赖有所不同，以下是安装依赖的示例：</p><ul><li>安装<code>dayjs</code>到根目录，执行<code>pnpm add dayjs -w</code>，<code>-w</code>表示安装到根目录。</li><li>安装<code>dayjs</code>到<code>packages/axios</code>，在根目录执行<code>pnpm add dayjs -F packages/axios</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在根目录安装的 npm 包，所有子项目都可以使用，在子项目安装的 npm 包，只有该子项目可以使用。</p></div>`,9)]))}const k=a(p,[["render",i]]);export{h as __pageData,k as default};
