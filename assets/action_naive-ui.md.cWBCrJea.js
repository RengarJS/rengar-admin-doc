import{_ as e,C as l,c as p,o as t,ae as a,j as h,a as i,G as d}from"./chunks/framework.DDmtCRY9.js";const y=JSON.parse('{"title":"naive-ui 组件库使用说明","description":"","frontmatter":{},"headers":[],"relativePath":"action/naive-ui.md","filePath":"action/naive-ui.md"}'),r={name:"action/naive-ui.md"};function k(o,s,E,u,c,g){const n=l("n-input");return t(),p("div",null,[s[2]||(s[2]=a('<h1 id="naive-ui-组件库使用说明" tabindex="-1">naive-ui 组件库使用说明 <a class="header-anchor" href="#naive-ui-组件库使用说明" aria-label="Permalink to &quot;naive-ui 组件库使用说明&quot;">​</a></h1><p>在开发的过程中，发现很多人对于<code>naive-ui</code>的使用不是很熟悉，可能是因为<code>naive-ui</code>这个组件库比较特殊，跟其他的组件库不太一样，所以在使用的过程中，可能会遇到一些问题。</p><h2 id="受控和非受控" tabindex="-1">受控和非受控 <a class="header-anchor" href="#受控和非受控" aria-label="Permalink to &quot;受控和非受控&quot;">​</a></h2><p>一个组件的行为可以分为受控模式和非受控模式两种。非受控模式指的是只监听组件的变化，而不去控制组件的 value，受控模式指的是控制组件的值。</p><h3 id="非受控模式" tabindex="-1">非受控模式 <a class="header-anchor" href="#非受控模式" aria-label="Permalink to &quot;非受控模式&quot;">​</a></h3>',5)),h("p",null,[s[0]||(s[0]=i("在这种情况下，你不能控制 ")),d(n),s[1]||(s[1]=i(" 的 value，而只能监听它的变化，组件值的变化由组件自身控制。"))]),s[3]||(s[3]=a(`<div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">n-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handleUpdateValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="受控模式" tabindex="-1">受控模式 <a class="header-anchor" href="#受控模式" aria-label="Permalink to &quot;受控模式&quot;">​</a></h3><p>在这种情况下，你既监听了组件的变化，然后也控制了组件的值。如果你不更新 value，那么组件的值不会改变，组件值的变化由你控制。</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">n-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handleUpdateValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="v-model" tabindex="-1">v-model <a class="header-anchor" href="#v-model" aria-label="Permalink to &quot;v-model&quot;">​</a></h3><p>v-model 控制的组件在受控模式下，因为 vue3 中 v-model 不加参数等同于 <code>:model-value</code> 和 <code>@update:model-value</code>的组合。 在<code>naive-ui</code> 中的受控模式：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">n-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const value = ref(&#39;&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在<code>naive-ui</code>中，只要看到组件的 props 的某个字段有<code>受控</code>的字样，你就可以使用<code>v-model:xxx</code>的方式来控制组件的值。</p><h2 id="update-xxx-和-on-update-xxx-的区别" tabindex="-1">@update:xxx 和 on-update:xxx 的区别 <a class="header-anchor" href="#update-xxx-和-on-update-xxx-的区别" aria-label="Permalink to &quot;@update:xxx 和 on-update:xxx 的区别&quot;">​</a></h2><h3 id="情况-1" tabindex="-1">情况 1 <a class="header-anchor" href="#情况-1" aria-label="Permalink to &quot;情况 1&quot;">​</a></h3><p>如果你没有在同一个组件上同时使用 v-model:xxx 和 on-update:xxx，@update:xxx 和 on-update:xxx 在模版中使用时没有任何区别。</p><p>在 Naive UI 中，全部的 API 文档使用 on-update:xxx 格式，因为 @ 只是 Vue 提供的一种简写。</p><p>如果你偏爱 camelCase，可以使用 onUpdate:xxx。</p><p>如果你在使用 JSX，可以使用 onUpdateXxx（所有的 onUpdate:xxx 都有一个 onUpdateXxx 的对等实现）。</p><h4 id="情况-2" tabindex="-1">情况 2 <a class="header-anchor" href="#情况-2" aria-label="Permalink to &quot;情况 2&quot;">​</a></h4><p>如果你在一个组件上使用了 v-model:xxx，你应该使用 @update:xxx。</p><p>✅ 例子 <code>&lt;n-input v-model:value=&quot;xxx&quot; @update:value=&quot;yyy&quot; /&gt;</code>。</p><p>❌ 例子 <code>&lt;n-input v-model:value=&quot;xxx&quot; :on-update:value=&quot;yyy&quot; /&gt;</code>。</p><p>这是因为 v-model:value=&quot;xxx&quot; 会被转化为 :onUpdate:value=&quot;xxx&quot;。如果你同时使用了 @update:value=&quot;yyy&quot;，他们会被转化为 :onUpdate:value=&quot;[xxx, yyy]&quot;，然后 Naive UI 会来处理这种情况。</p><p>然而如果你使用了 on-update:value=&quot;yyy&quot;，Vue 会生成类似于 :onUpdate:value=&quot;xxx&quot; :on-update:value=&quot;yyy&quot; 的代码，然后第二个属性会在运行时覆盖掉第一个，v-model:value 会崩掉。</p><h3 id="render-函数" tabindex="-1">render 函数 <a class="header-anchor" href="#render-函数" aria-label="Permalink to &quot;render 函数&quot;">​</a></h3><p>在<code>naive-ui</code>中，到处都能看到<code>自定义渲染</code>，比如在<code>NDataTable</code>的<code>columns</code>中，你可以使用<code>render</code>来渲染自定义的内容。</p><p>只要是可以<code>自定义渲染</code>的地方，都可以使用 vue 原生的<code>h</code>函数或者<code>jsx</code>语法来渲染，<code>h</code>函数写和读都是非常痛苦的，所以介绍一下<code>jsx</code>的写法：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">n-data-table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import  { NTag,  type DataTableColumns } from &quot;naive-ui&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">intrface Row {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status: 1 | 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const columns: DataTableColumns&lt;&gt; = [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: &#39;name&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key: &#39;name&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: &#39;状态&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key: &#39;status&#39;,</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    render(row) {</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      return &lt;NTag&gt;{row.status === 1 ? &quot;已启用&quot; : &quot;已禁用&quot; }&lt;/NTag&gt;</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>`,24))])}const m=e(r,[["render",k]]);export{y as __pageData,m as default};
